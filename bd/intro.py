# PostgreSQL - Система управления базами данных(СУБД/DBMS)
# Postgres - сама база данных, она объектно реляционная то есть данные хранятся в виде таблиц, и таблицы имеют связи между собой
# SQL (Structured Query Language) – декларативный язык структурированных запрос он применяется для создания и получения данных при помощи запросов в БД

# ------------------------------------------------------------------------------

# команда для входа в бд через юзера postgres
# sudo -u postgres psql

# команда для входа в своего юзера 
# psql

# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1':

# изменение пароля
# ALTER USER 'username' WITH PASSWORD '1';

# создание бд
# CREATE DATABASE 'name';

# ------------------------------------------------------------------------------

# Типы полей 

# Numeric Types(числовые типы)
    # a. smallint(2 bytes) -> -32767 to 32767
    # b. integer(4 bytes) -> -2147483648 to 2147483647
    # c. bigint(8 bytes) -> -...
    # d. real (4 bytes) -> числа с плавающей точкой
    # f. serial (4 bytes) -> integer, auto-increment

# Character types(Символьные типы(строковые)):
    # a. varchar(кол-во символов) -> если мы укажем 50 символов, а заполним только 10, то остальные будут свободны. Макс 255
    # b. char(кол-во символов) -> если мы укажем 50 символов, а заполним только 10, то остальные будут заполнены пробелом. Макс 255
    # c. text() -> неогр кол-во симовлов

# Boolen Type:
    # a. boolean(1 bytes) -> True/False

# date -> календарная дата (год.месяц.день)
 
# location -> координатная точка (x, y) - (245, -12)

# enumerate types:
    # ('a', 'b', 'c')
    # CREATE TYPE <any name> AS ENUM ('Happy', 'Sad', 'Mad'); 

# ------------------------------------------------------------------------------

# Команда для получения данных 
# SELECT (columns) * FROM table_name;

# ORDER BY : Позволяет нам сортировать выводящие данные по убыванию или возрастанию. ASC(по возрастанию) и DESC(по убыванию)
# Синтаксис: SELECT <row> FROM <tablename> ORDER BY <row> [ASC/DESC]

# WHERE: используется для фильтрации по полям. Будут выводится только те данные которые соответствуют улсовию оператора WHERE
# Синтаксис: SELECT <row> FROM <tablename> WHERE <row> = 'чему либо'

# BETWEEN: условия между
# SELECT * FROM product WHERE id  BETWEEN 3 AND 8

# AND оператор и, для множественных условий
# IN: WHERE <row> in (1,2,3,4) 
# LIMIT: ставит ограничение в кол-ве получаемых данных

# LIKE: Выводит результат который соответствует введенному шаблону для строк. Чувствителен к регистру
# ILIKE: тоже самое только не зависит от регистра
# Синтаксис: SELECT <row> FROM <tablename> WHERE <row> LIKE/ILIKE 'чему либо';

# Экспорт бд(дамп):
# pg_dump -U <username> -d 'dbname' > 'file.sql'

# Импорт:
# psql -U <username> -d <dbname> -f <filename>

# ------------------------------------------------------------------------------

# Ограничения:
#     1. NOT NULL - Обязательно к заполнению
#     2. UNIQUE - Будут хранится только уникальные значения
#     3. CHECK -> CHECK age > -1 - Ограничение проверки на условие
#     4. PRIMARY KEY (для установки идентификатора данных в таблице)
#     5. FOREIGN KEY (для установки связей между таблицами)
#     6. ON DELETE - для установки поведения при удалении данных которые были связаны 

# ------------------------------------------------------------------------------

# JOIN: Выборка данных из двух таблиц, соединение таблиц

# LEFT  JOIN:Выборка будет содержать все строки из левой таблицы

# RIGHT JOIN: Выборка будет содержать все строки из правой таблицы

# SELECT p1.title, p1.

# ------------------------------------------------------------------------------

# Команды для добавления данных в таблицу
# INSERT INTO table_name [(column1)] VALUES (value1) (data);

# Команда для обновления данных
# UPDATE <table> SET <colume> = <new_value> WHERE <colume> = <value>;
# UPDATE table_name SET column1 = value1 WHERE condition;

# Команда для удаления данных
# DELETE FROM <table> WHERE <column> = <value>;

# ------------------------------------------------------------------------------

